{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport socketIOClient from \"socket.io-client\";\nimport Swal from \"sweetalert2\";\nimport { parseCookies, setCookie } from \"nookies\";\nimport { withTranslation } from \"../utils/i18n\";\nimport NameEntry from \"../components/NameEntry\";\nimport Lobby from \"../components/Lobby\";\nimport InGame from \"../components/InGame\";\nimport Loading from \"../components/Loading\";\nimport { lockedMessage } from \"../utils/misc\";\nvar socket = socketIOClient();\n\nvar Game = function Game(_ref) {\n  var t = _ref.t,\n      loading = _ref.loading;\n  var router = useRouter();\n  var gameCode = router.query.gameCode;\n\n  var _useState = useState({\n    status: \"loading\"\n  }),\n      gameState = _useState[0],\n      setGameState = _useState[1];\n\n  useEffect(function () {\n    var _parseCookies = parseCookies(),\n        previousGameCode = _parseCookies.previousGameCode,\n        previousName = _parseCookies.previousName;\n\n    if (previousGameCode === gameCode && previousName) {\n      socket.emit(\"joinGame\", {\n        gameCode: gameCode,\n        previousName: previousName\n      });\n    } else {\n      socket.emit(\"joinGame\", {\n        gameCode: gameCode\n      });\n    }\n\n    socket.on(\"gameChange\", function (newGameState) {\n      setGameState(newGameState); // setting disconnect handler after game has been joined,\n      // or else it will cause an infinite loop with the invalid handler\n\n      if (gameCode !== \"ffff\") {\n        socket.on(\"disconnect\", function () {\n          return router.push(\"/\" + gameCode);\n        });\n      }\n    });\n    socket.on(\"invalid\", function () {\n      return router.push(\"/join?invalid=\" + gameCode);\n    });\n    socket.on(\"badName\", function () {\n      return Swal.fire(\"Name already in use\");\n    });\n    socket.on(\"lockedWarning\", function (minutes) {\n      return Swal.fire(lockedMessage(minutes)).then(function () {\n        return router.push(\"/\");\n      });\n    });\n    return function cleanup() {\n      socket.close();\n      setGameState({\n        status: \"loading\"\n      });\n    };\n  }, []);\n\n  var onNameEntry = function onNameEntry(name) {\n    socket.emit(\"name\", name);\n    setCookie(null, \"previousGameCode\", gameCode);\n    setCookie(null, \"previousName\", name);\n  };\n\n  var status = gameState.status,\n      me = gameState.me;\n  var showLoading = status === \"loading\" || loading;\n  var showNameEntry = !showLoading && !me.name;\n  var showLobby = !showNameEntry && status.startsWith(\"lobby\");\n  var showGame = !showNameEntry && status === \"ingame\";\n  return __jsx(React.Fragment, null, showLoading && __jsx(React.Fragment, null, __jsx(\"h3\", null, t(\"ui.waiting for players\")), __jsx(Loading, null)), !showLoading && __jsx(React.Fragment, null, showNameEntry && __jsx(NameEntry, {\n    onNameEntry: onNameEntry,\n    gameCode: gameState.code,\n    socket: socket\n  }), showLobby && __jsx(Lobby, {\n    gameState: gameState,\n    socket: socket\n  }), showGame && __jsx(InGame, {\n    gameState: gameState,\n    socket: socket\n  })));\n};\n\nexport default withTranslation(\"common\")(Game);","map":null,"metadata":{},"sourceType":"module"}