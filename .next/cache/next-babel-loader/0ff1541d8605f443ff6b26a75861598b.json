{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\n\nconst Settings = ({\n  gameState,\n  socket\n}) => {\n  const {\n    settings,\n    AVAILABLE_LOCATION_PACKS\n  } = gameState;\n  const {\n    timeLimit: serverMinutes,\n    locationPack: serverPackId,\n    includeAllSpy: serverIncludeAllSpy\n  } = settings;\n  return __jsx(\"div\", null, __jsx(TimeLimit, {\n    onSetMinutes: minutes => socket.emit(\"setTimeLimit\", minutes),\n    serverMinutes: serverMinutes\n  }), __jsx(\"br\", null), __jsx(LocationPack, {\n    onSetLocationPack: packId => socket.emit(\"setLocationPack\", packId),\n    serverPackId: serverPackId,\n    locationPackList: AVAILABLE_LOCATION_PACKS\n  }), __jsx(IncludeAllSpy, {\n    onSetIncludeAllSpy: includeAllSpy => socket.emit(\"setIncludeAllSpy\", includeAllSpy),\n    serverIncludeAllSpy: serverIncludeAllSpy\n  }));\n};\n\nconst TimeLimit = ({\n  onSetMinutes,\n  serverMinutes\n}) => {\n  const minLength = 0;\n  const maxLength = 60;\n  const {\n    0: minutes,\n    1: setMinutes\n  } = useState(serverMinutes);\n\n  const handleChange = change => () => {\n    const newMinutes = minutes + change;\n\n    if (newMinutes >= minLength && newMinutes <= maxLength) {\n      setMinutes(newMinutes);\n      onSetMinutes(newMinutes);\n    }\n  };\n\n  useEffect(() => {\n    setMinutes(serverMinutes);\n  }, [serverMinutes]);\n  return __jsx(\"div\", null, __jsx(\"label\", null, \"Time Limit:\"), __jsx(\"div\", {\n    style: {\n      margin: \"-.5em 0 -1em\"\n    },\n    className: \"jsx-4245920973\"\n  }, __jsx(\"button\", {\n    onClick: handleChange(-1),\n    disabled: minutes <= minLength,\n    className: \"jsx-4245920973\" + \" \" + \"btn-small\"\n  }, \"-\"), __jsx(\"span\", {\n    className: \"jsx-4245920973\"\n  }, minutes, \" minute\", minutes !== 1 ? \"s\" : \"\"), __jsx(\"button\", {\n    onClick: handleChange(1),\n    disabled: minutes >= maxLength,\n    className: \"jsx-4245920973\" + \" \" + \"btn-small\"\n  }, \"+\"), __jsx(_JSXStyle, {\n    id: \"4245920973\"\n  }, [\"button.jsx-4245920973{margin:1em,0;font-size:1.5em;}\"])));\n};\n\nconst LocationPack = ({\n  onSetLocationPack,\n  locationPackList,\n  serverPackId\n}) => {\n  const {\n    0: selectedPackId,\n    1: setSelectedPackId\n  } = useState(serverPackId);\n\n  const handleChange = newPackId => {\n    setSelectedPackId(newPackId);\n    onSetLocationPack(newPackId);\n  };\n\n  useEffect(() => {\n    setSelectedPackId(serverPackId);\n  }, [serverPackId]);\n  return __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"location-pack\"\n  }, \"Location Pack:\"), __jsx(\"select\", {\n    className: \"u-full-width\",\n    id: \"location-pack\",\n    value: selectedPackId,\n    onChange: ({\n      target: {\n        value\n      }\n    }) => handleChange(value),\n    style: {\n      maxWidth: \"10em\"\n    }\n  }, locationPackList.map(({\n    id,\n    name\n  }) => __jsx(\"option\", {\n    key: id,\n    value: id\n  }, name))));\n};\n\nconst IncludeAllSpy = ({\n  onSetIncludeAllSpy,\n  serverIncludeAllSpy\n}) => {\n  const {\n    0: includeAllSpy,\n    1: setIncludeAllSpy\n  } = useState(serverIncludeAllSpy);\n\n  const handleChange = checked => {\n    setIncludeAllSpy(checked);\n    onSetIncludeAllSpy(checked);\n  };\n\n  useEffect(() => {\n    setIncludeAllSpy(serverIncludeAllSpy);\n  }, [serverIncludeAllSpy]);\n  return __jsx(\"label\", null, __jsx(\"input\", {\n    type: \"checkbox\",\n    onChange: ({\n      target: {\n        checked\n      }\n    }) => handleChange(checked),\n    checked: includeAllSpy\n  }), __jsx(\"span\", {\n    className: \"label-body\"\n  }, \"Enable ~2% chance all players are spies\"));\n};\n\nexport default Settings;","map":null,"metadata":{},"sourceType":"module"}