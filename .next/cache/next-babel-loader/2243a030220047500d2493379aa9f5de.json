{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport dynamic from \"next/dynamic\";\nimport { useState, useEffect } from \"react\";\nimport Swal from \"sweetalert2\";\nconst PWAPrompt = dynamic(() => import(\"react-ios-pwa-prompt\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-ios-pwa-prompt\")],\n    modules: [\"react-ios-pwa-prompt\"]\n  }\n});\n\nconst AddAppButton = () => {\n  const {\n    0: isAlreadyPWA,\n    1: setIsAlreadyPWA\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isiOS,\n    1: setIsiOS\n  } = useState(false);\n  const {\n    0: deferredPrompt,\n    1: setDeferredPrompt\n  } = useState();\n  const {\n    0: showiOS,\n    1: setShowiOS\n  } = useState(false);\n  useEffect(() => {\n    // https://stackoverflow.com/a/52695341\n    setIsAlreadyPWA(window.matchMedia(\"(display-mode: standalone)\").matches || window.navigator.standalone || document.referrer.includes(\"android-app://\"));\n    setIsiOS(/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream); // https://web.dev/customize-install/#beforeinstallprompt\n\n    window.addEventListener(\"beforeinstallprompt\", e => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault(); // Stash the event so it can be triggered later.\n\n      setDeferredPrompt(e);\n    });\n  });\n\n  const handleAddApp = () => {\n    setIsLoading(true);\n\n    if (isiOS) {\n      setShowiOS(true);\n    } else if (deferredPrompt) {\n      // https://web.dev/customize-install/#in-app-flow\n      // Show the install prompt\n      deferredPrompt.prompt(); // Wait for the user to respond to the prompt\n\n      deferredPrompt.userChoice.then(() => setIsLoading(false));\n    } else {\n      Swal.fire(\"Oops...\", \"Can't add Drawphone as an app on this device. Try on your phone!\", \"error\").then(() => setIsLoading(false));\n    }\n  };\n\n  return __jsx(React.Fragment, null, !isAlreadyPWA && __jsx(\"button\", {\n    className: \"btn-small btn-vertical\",\n    onClick: handleAddApp\n  }, isLoading ? \"Loading...\" : \"Add SpyGame as App\"), showiOS && __jsx(PWAPrompt, {\n    debug: true,\n    permanentlyHideOnDismiss: false,\n    onCancel: () => {\n      setShowiOS(false);\n      setIsLoading(false);\n    }\n  }));\n};\n\nexport default AddAppButton;","map":null,"metadata":{},"sourceType":"module"}