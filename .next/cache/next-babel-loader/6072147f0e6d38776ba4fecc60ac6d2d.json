{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport Router from \"next/router\";\nimport { withTranslation } from \"../utils/i18n\";\nimport Swal from \"sweetalert2\";\nimport StrikeableBox from \"./StrikeableBox\";\nimport { logEvent } from \"../utils/analytics\";\nimport AccessCode from \"./AccessCode\";\nimport HideableContainer from \"./HideableContainer\";\n\nvar InGame = function InGame(_ref) {\n  var t = _ref.t,\n      i18n = _ref.i18n,\n      gameState = _ref.gameState,\n      socket = _ref.socket;\n  var me = gameState.me,\n      location = gameState.location,\n      locationList = gameState.locationList,\n      players = gameState.players,\n      latestServerTimeLeft = gameState.timeLeft,\n      timePaused = gameState.timePaused,\n      settings = gameState.settings;\n\n  var _useState = useState(latestServerTimeLeft),\n      timeLeft = _useState[0],\n      setTimeLeft = _useState[1];\n\n  useEffect(function () {\n    logEvent(\"player-roundCount\", gameState.currentRoundNum + 1);\n    logEvent(\"player-language\", i18n.language);\n  }, []);\n  useEffect(function () {\n    var interval = null;\n\n    if (!timePaused) {\n      interval = setInterval(function () {\n        if (timeLeft <= 0) {\n          clearInterval(interval);\n          setTimeLeft(0);\n\n          if (gameState.players[0].name === me.name) {\n            logEvent(\"timerExpired\", true);\n          }\n\n          return;\n        }\n\n        setTimeLeft(function (timeLeft) {\n          return timeLeft - 1;\n        });\n      }, 1000);\n    } else if (timePaused && timeLeft !== 0) {\n      clearInterval(interval);\n    }\n\n    return function () {\n      return clearInterval(interval);\n    };\n  }, [timePaused, timeLeft]);\n  useEffect(function () {\n    return setTimeLeft(latestServerTimeLeft);\n  }, [latestServerTimeLeft]);\n  var isSpy = me.role === \"spy\";\n  var firstPlayer = players.find(function (player) {\n    return player.isFirst;\n  });\n  var timeExpired = timeLeft <= 0;\n  var minutesLeft = Math.floor(timeLeft / 60);\n  var secondsLeft = (timeLeft % 60 + \"\").padStart(2, \"0\");\n  var showTapToPause = !timePaused && timeLeft > 0;\n\n  var handleTogglePause = function handleTogglePause() {\n    if (timeExpired) return;\n    socket.emit(\"togglePause\");\n    logEvent(\"togglePause\", true);\n  };\n\n  return __jsx(\"div\", {\n    name: \"gameView\",\n    style: {\n      userSelect: \"none\"\n    }\n  }, settings.timeLimit !== 0 && __jsx(\"div\", {\n    style: {\n      marginBottom: \"1em\"\n    },\n    onClick: handleTogglePause\n  }, __jsx(\"h4\", {\n    className: \"game-countdown \" + (timeExpired ? \"finished \" : \" \") + (timePaused ? \"paused\" : \"\"),\n    style: {\n      marginBottom: \"0.25em\"\n    }\n  }, minutesLeft, \":\", secondsLeft), __jsx(\"div\", null, timePaused && __jsx(\"div\", {\n    className: \"red-text\"\n  }, \"Game paused\"), showTapToPause && __jsx(\"div\", {\n    className: \"subtitle\"\n  }, \"Tap to pause\"))), __jsx(AccessCode, {\n    code: gameState.code\n  }), __jsx(HideableContainer, {\n    title: \"Your Role\",\n    initialHidden: false\n  }, __jsx(\"div\", {\n    className: \"status-container-content\"\n  }, isSpy && __jsx(\"div\", {\n    className: \"player-status player-status-spy\"\n  }, t(\"ui.you are the spy\")), !isSpy && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"player-status player-status-not-spy\",\n    dangerouslySetInnerHTML: {\n      __html: t(\"ui.you are not the spy\")\n    }\n  }), __jsx(\"div\", {\n    className: \"current-location\"\n  }, __jsx(\"div\", {\n    className: \"current-location-header\"\n  }, t(\"ui.the location\"), \":\", \" \"), __jsx(\"div\", {\n    className: \"current-location-name\"\n  }, t(location.name))), __jsx(\"div\", {\n    className: \"current-role\"\n  }, __jsx(\"div\", {\n    className: \"current-role-header\"\n  }, t(\"ui.your role\"), \": \"), __jsx(\"div\", {\n    className: \"current-role-name\"\n  }, t(me.role)))))), me.isFirst && __jsx(\"div\", {\n    className: \"red-text\"\n  }, \"You will ask the first question.\"), !me.isFirst && __jsx(\"div\", null, \"The first question will be asked by \", firstPlayer.name, \".\"), __jsx(\"h5\", null, t(\"ui.players\")), __jsx(\"ul\", {\n    className: \"ingame-player-list\"\n  }, players.map(function (player, i) {\n    return __jsx(StrikeableBox, {\n      key: i\n    }, player.name && player.name, !player.name && __jsx(\"i\", null, \"Joining...\"), player.isFirst && __jsx(\"div\", {\n      className: \"first-player-indicator\",\n      dangerouslySetInnerHTML: {\n        __html: t(\"ui.first\")\n      }\n    }), !player.connected && __jsx(\"i\", null, \" (Disconnected)\"));\n  })), __jsx(\"div\", {\n    className: \"u-cf\"\n  }), __jsx(\"h5\", null, t(\"ui.location reference\")), __jsx(\"ul\", {\n    className: \"location-list\"\n  }, locationList.map(function (name, i) {\n    return __jsx(StrikeableBox, {\n      key: i\n    }, t(name));\n  })), __jsx(\"div\", {\n    className: \"button-container\"\n  }, __jsx(\"button\", {\n    className: \"btn-end\",\n    onClick: function onClick() {\n      return popup(t(\"ui.end game\"), t(\"ui.back\"), function () {\n        return socket.emit(\"endGame\");\n      });\n    }\n  }, t(\"ui.end game\")), __jsx(\"button\", {\n    className: \"btn-leave\",\n    onClick: function onClick() {\n      return popup(t(\"ui.leave game\"), t(\"ui.back\"), function () {\n        //prevents a redirect back to /[gameCode]\n        socket.off(\"disconnect\");\n        Router.push(\"/\");\n      });\n    }\n  }, t(\"ui.leave game\"))));\n};\n\nvar popup = function popup(yesText, noText, onYes) {\n  return Swal.fire({\n    title: \"Are you sure?\",\n    icon: \"warning\",\n    showCancelButton: true,\n    confirmButtonText: yesText,\n    cancelButtonText: noText\n  }).then(function (result) {\n    if (result.value) {\n      onYes();\n    }\n  });\n};\n\nexport default withTranslation(\"common\")(InGame);","map":null,"metadata":{},"sourceType":"module"}