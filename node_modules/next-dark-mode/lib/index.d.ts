import React from 'react';
export declare enum MODE {
    DARK = "dark",
    LIGHT = "light"
}
export interface Config {
    autoModeCookieName: string;
    darkModeCookieName: string;
    defaultMode: MODE;
}
export declare const NextDarkModeContext: React.Context<NextDarkModeContextConsumer>;
declare const _default: (App: any, config?: Partial<Config> | undefined) => {
    ({ initialProps, ...props }: WrappedAppProps): JSX.Element;
    getInitialProps({ Component, ctx }: import("next/dist/next-server/lib/utils").AppContextType<import("next/dist/client/router").Router>): Promise<{
        autoMode: boolean;
        darkMode: boolean;
        initialProps: {};
    } | {
        initialProps: {};
        autoMode?: undefined;
        darkMode?: undefined;
    }>;
    displayName: string;
};
export default _default;
export interface NextDarkModeContextConsumer {
    autoModeActive: boolean;
    autoModeSupported: boolean;
    darkModeActive: boolean;
    switchToAutoMode: () => void;
    switchToDarkMode: () => void;
    switchToLightMode: () => void;
}
export interface WrappedAppProps {
    autoMode?: boolean;
    darkMode?: boolean;
    initialProps: any;
}
